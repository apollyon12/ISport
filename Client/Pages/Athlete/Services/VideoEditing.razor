@page "/services/video-editing"
@page "/services/video-editing/tut/{Tut:bool}"

@using System.Net.Http.Json
@using iSportsRecruiting.Shared.DTO
@using iSportsRecruiting.Client.Pages.Athlete.Services.Shared
@using iSportsRecruiting.Client.Shared.Dialogs

@inject ISnackbar _snackbar;
@inject HttpClient Http;
@inject IDialogService _dialogService;
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;

<MudCard Style="margin: 3%;">
    @if (isLoading)
    {
        <MudProgressLinear Style="width: 100%" Indeterminate="true" Color="Color.Secondary" />
    }

    <MudGrid Style="padding: 3%;">
        <ServicesHead />

        <MudItem sm="4" />
        <MudItem sm="4" Style="width: 100%">
            <MudCard Elevation="0" Style="margin-top: 10%;">
                <MudText Align="Align.Center" Style="color: white;background-color: #0c0c0c;width: 100%;padding: 3%;font-size: 1.6em;">Video Editing</MudText>
            </MudCard>
            <MudText Align="Align.Center" Style="color: black;font-size: 1.6em;margin: 14px;">
                <strong>$99</strong> / Per Highlight
            </MudText>
            <MudButton Disabled="@(isLoading || servicesCount > 0)" StartIcon="@Icons.Filled.CreditCard" Style="background-color: #04b516;width: 100%;color: black;font-size: 1.6em;padding: 2%;" OnClick="PayService">
                PURCHASE NOW!
            </MudButton>


            @if (servicesCount > 0)
            {
                <MudAlert Severity="Severity.Success" Class="mt-2">You currently have @servicesCount video editing service(s)</MudAlert>
            }
        </MudItem>

        @if (Tut && !_tutFinalized)
        {
            <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                <WelcomePopover Open="Tut" ClickNext="NextFromTutorial" IsMobile="true">
                    <Title>
                        Additional Services
                    </Title>
                    <Description>
                        <b>Blast Emails;</b> This will increase your posibility of getting noticed. The blast email <br />
                        was created you help you approach and connect with more college coaches at once<br />
                        to start stablishing the connections with College Coaches.
                    </Description>
                </WelcomePopover>

            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                <WelcomePopover Open="Tut" ClickNext="NextFromTutorial" Style="margin-right: 4vh;margin-top: 39vh;">
                    <Title>
                        Additional Services
                    </Title>
                    <Description>
                        <b>Blast Emails;</b> This will increase your posibility of getting noticed. The blast email <br />
                        was created you help you approach and connect with more college coaches at once<br />
                        to start stablishing the connections with College Coaches.
                    </Description>
                </WelcomePopover>

            </MudHidden>

        }

        <MudItem sm="4" />

        <MudItem sm="12" Style="margin-top: 5%;">
            <MudExpansionPanels>
                <MudExpansionPanel Style="background-color: #0c0c0c;color: white;">
                    <TitleContent>
                        <div class="d-flex">
                            <MudText Style="font-size: 1.4em; width: 100%" Align="Align.Center">HIGHLIGHTS VIDEOS?</MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudText>
                            It is recommended to have the highlights videos between 3-4 minutes max unless the coach requests a full game. The recommended platforms are Huld and YouTube. Our editing team can help you with YouTube if these are within your needs.
                        </MudText>
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudItem>
    </MudGrid>
</MudCard>

@code {
    bool isLoading;
    AthleteDTO athlete;
    int servicesCount;

    private bool _tutFinalized;
    protected override async Task OnInitializedAsync()
    {
        var account = await LocalStorage.GetItemAsync<AccountDto>("account");
        athlete = account.Athlete;

        if (account.Type == UserType.Athlete)
        {
            _tutFinalized = !account.Athlete.ShowTut;
            StateHasChanged();
        }

        var result = await Http.GetFromJsonAsync<Response<int>>($"api/v1/service/check/{athlete.Id}/3");
        servicesCount = result?.Payload ?? 0;
    }

    private async Task PayService()
    {
        isLoading = true;
        StateHasChanged();

        var result = await Http.GetFromJsonAsync<Response<bool>>($"api/v1/service/pay/{athlete.Id}/VE");

        if (result?.Payload ?? false)
        {
            var parameters = new DialogParameters
            {
                {"Title", "Payment Success"},
                {"Content", "We got your request for the Video Editing. ISR College Recruiting Coach will contact you within 24 hours"},
            };
            _dialogService.Show<ISRNotification>("ISRNotification", parameters);
        }
        else if (result is not null)
        {
            _snackbar.Add(result.Message, Severity.Error,
                options =>
                {
                    options.VisibleStateDuration = int.MaxValue;
                    options.CloseAfterNavigation = true;
                });
        }
        else
        {
            _snackbar.Add("We couldn't complete the payment, please check your billing data", Severity.Error,
                options =>
                {
                    options.VisibleStateDuration = int.MaxValue;
                    options.CloseAfterNavigation = true;
                });
        }

        isLoading = false;
        StateHasChanged();
    }

    [Parameter]
    public bool Tut { get; set; }

    private void NextFromTutorial()
    {
        Tut = false;
        StateHasChanged();

        Task.Run(async () =>
        {
            var account = await LocalStorage.GetItemAsync<AccountDto>("account");
            Http.GetFromJsonAsync<Response>($"api/v1/athlete/tut/{account.Id}/disable");

            account.Athlete.ShowTut = false;
            await LocalStorage.SetItemAsync("account", account);

            Navigation.NavigateTo("dashboard");
        });
    }
}