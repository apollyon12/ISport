@page "/login/password/create"
@page "/login/password/create/{UserId:int}"

@layout PublicLayout


@using iSportsRecruiting.Shared.DTO
@using iSportsRecruiting.Shared.Security
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using iSportsRecruiting.Client.Shared

@inject ISnackbar _snackBar
@inject HttpClient _httpClient
@inject NavigationManager _navigationManager
@inject Blazored.LocalStorage.ILocalStorageService _localStorage;

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center" Style="height: 100vh;">
    <MudPaper Elevation="9" Style="width: 500px;">
        <MudGrid Class="pa-8">
            <MudItem xs="12">
                <div class="d-flex justify-center">
                    <img src="images/ISR_BLACK.png" width="200" @onclick="@(() => _navigationManager.NavigateTo("/"))" style="cursor: pointer" />
                </div>
            </MudItem>

            <MudItem xs="12">
                <div class="d-flex justify-center">
                    @if (_account is not null)
                    {
                        @switch (_account.Type)
                        {
                            case UserType.Admin:
                                <MudText>@($"Welcome back! {_account.Admin.Username}")</MudText>
                                break;
                            case UserType.AssisAdmin:
                            case UserType.AssisCoord:
                                <MudText>@($"Welcome back! {_account.Assistant.FullName}")</MudText>
                                break;
                            case UserType.Athlete:
                                <MudText>@($"Welcome back! {_account.Athlete.FirstName} {_account.Athlete.LastName}")</MudText>
                                break;
                            case UserType.Coach:
                                <MudText>@($"Welcome back! {_account.Coach.Username}")</MudText>
                                break;
                        }
                    }
                </div>
            </MudItem>
            <MudItem xs="12">
                <div class="d-flex justify-center">
                    <MudText>We changed the way we save our passwords so you can be more secure!</MudText>
                </div>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Label="New Password" Variant="Variant.Outlined"
                              @bind-Value="Password" Required="true" RequiredError="Password is required!"
                              InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @ref="_confirmPassword" Label="Confirm New Password" Variant="Variant.Outlined"
                              @bind-Value="ConfirmPassword" Required="true" RequiredError="Confirm Password is required!"
                              InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility" Validation="new Func<string, string>(ValidateConfirmPassword)" />
            </MudItem>
            <MudItem xs="12" Class="d-flex justify-center">
                <MudButton ButtonType="ButtonType.Submit" Disabled="@IsLoading" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" Style="width: 100%;" OnClick="SubmitAsync">UPDATE</MudButton>
            </MudItem>
        </MudGrid>

        @if (IsLoading)
        {
            <MudProgressLinear Color="Color.Success" Indeterminate="true" />
        }
    </MudPaper>
</MudContainer>


@code {
    [Parameter]
    public int? UserId { get; set; }

    bool IsLoading { get; set; }
    string Password { get; set; }
    string ConfirmPassword { get; set; }

    string _email;
    AccountDto _account;
    bool _passwordVisibility;
    MudTextField<string> _confirmPassword;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null)
        {
            _email = await _localStorage.GetItemAsync<string>("email");
            _account = await _localStorage.GetItemAsync<AccountDto>("account");
            UserId = _account.Id;
        }
        else
        {
            var response = await _httpClient.GetFromJsonAsync<Response<AccountDto>>($"api/v1/account/details/{UserId}");

            if (response is not null)
            {
                _account = response.Payload;
                _email = GetEmail();
            }
            else
                _navigationManager.NavigateTo("login");

        }
    }

    private string GetEmail()
    {
        if (_account.Admin is not null)
            return _account.Admin.Email;
        else if (_account.Assistant is not null)
            return _account.Assistant.Email;
        else if (_account.Athlete is not null)
            return _account.Athlete.Email;
        else
            return _account.Coach.Email;
    }

    void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    async Task SubmitAsync()
    {
        await _confirmPassword.Validate();

        if (!_confirmPassword.Error)
        {
            IsLoading = true;
            StateHasChanged();

            var message = await _httpClient.PostAsJsonAsync($"api/v1/account/password/create",
                new LoginInfoDTO
                    {
                        Email = _email,
                        Cipher = Cripto.EncryptPassword(ConfirmPassword),
                        UserId = _account.Id,
                        UserType = (int)_account.Type
                    });

            if (message.IsSuccessStatusCode)
            {
                var response = await message.Content.ReadFromJsonAsync<Response<AccountDto>>();

                if (response is not null)
                {
                    await _localStorage.SetItemAsync("account", response.Payload);

                    await _localStorage.SetItemAsync("authToken", response.Payload.Token);
                    await _localStorage.SetItemAsync("refreshToken", response.Payload.RefreshToken);


                    if (response.Payload.Type == UserType.Athlete &&
                        !string.IsNullOrEmpty(response.Payload.Athlete.ImageProfile))
                        await _localStorage.SetItemAsync("userImageURL", response.Payload.Athlete.ImageProfile);

                    //((BlazorHeroStateProvider)_authenticationStateProvider).MarkUserAsAuthenticated(_email);
                    _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", response.Payload.Token);

                    _navigationManager.NavigateTo("/dashboard");
                }
            }

            IsLoading = false;
            StateHasChanged();
        }
    }

    string ValidateConfirmPassword(string input)
    {
        return input != Password ? "Passwords doesn't match!" : null;
    }
}
