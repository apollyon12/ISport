@using System.Net.Http.Json
@using iSportsRecruiting.Shared.DTO

@inject HttpClient Http
@inject IDialogService Dialog
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@if (IsMobile)
{
    <style>
        .mud-popover.mud-popover-open {
            margin-left: 5% !important;
            margin-right: 5% !important;
            top: 170px !important;
        }
    </style>
}

<MudOverlay @bind-Visible="@Open" DarkBackground="true" AutoClose="false" OnClick="ConfirmCancelTut" />
<MudPopover Open="@Open" Fixed="true" Style="@Style">
    <div Class="mb-4" style="background-color: #2ebb0e; width: 100%; height: 5px"></div>
    <div class="d-flex flex-column pa-3">
        <MudText Align="Align.Center" Typo="Typo.h6">@Title</MudText>
        <br />
        <MudText Align="Align.Center">
            @Description
        </MudText>
        <br />
        <br />
        @if (Buttons is not null)
        {
            @Buttons
        }
        else
        {
            <MudButton OnClick="ClickNext" Class="ml-auto" Color="Color.Primary">NEXT</MudButton>
        }
    </div>
</MudPopover>

@code {

    [Parameter]
    public string Style { get; set; } = string.Empty;

    [Parameter]
    public bool Open { get; set; }

    [Parameter]
    public bool IsMobile { get; set; }

    [Parameter]
    public EventCallback ClickNext { get; set; }

    [Parameter]
    public RenderFragment? Title { get; set; }

    [Parameter]
    public RenderFragment? Buttons { get; set; }

    private async Task ConfirmCancelTut()
    {
        bool? result = await Dialog.ShowMessageBox(
            "Warning",
            "Are you sure you dont want to complete the tutorial?",
            yesText: "Let's Stay", cancelText: "Don't show again");
        if (result == null)
        {
            var account = await LocalStorage.GetItemAsync<AccountDto>("account");
            _ = Http.GetFromJsonAsync<Response>($"api/v1/athlete/tut/{account.Id}/disable");
            account.Athlete.ShowTut = false;

            await LocalStorage.SetItemAsync("account", account);            
            Navigation.NavigateTo(Navigation.Uri, true);
        }
    }

    [Parameter]
    public RenderFragment? Description { get; set; }
}