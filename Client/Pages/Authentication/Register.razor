@page "/register/"

@layout PublicLayout

@using iSportsRecruiting.Shared.DTO
@using iSportsRecruiting.Client.Pages.Authentication.Components;
@using iSportsRecruiting.Client.Shared
@using iSportsRecruiting.Shared.Models
@using System.Net.Http.Json
@using MudBlazor.Utilities

@inject ISnackbar _snackBar
@inject HttpClient _httpClient
@inject NavigationManager _navigationManager

<style>
    .mud-container-maxwidth-sm {
        max-width: 561px !important;
    }
</style>

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center" Style="height: 100vh;">
    <MudPaper Elevation="9" Style="width: 500px;">
        <MudGrid Class="pa-8">

            <MudItem xs="12">
                <div class="d-flex justify-center">
                    <img src="images/ISR_BLACK.png" width="200" @onclick="@(() => _navigationManager.NavigateTo("/"))" style="cursor: pointer" />
                </div>
            </MudItem>

            <MudItem xs="12">
                <div class="d-flex justify-center">
                    <MudText Typo="Typo.h4">REGISTER AS</MudText>
                </div>
            </MudItem>

            <MudItem xs="12">
                <div class="d-flex justify-center">
                    <MudText>Already have an account? <MudLink Href="/login">Sign In</MudLink></MudText>
                </div>
            </MudItem>

            <MudItem xs="6" Style="text-align: center">
                <MudButton Style="width: 100%" Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => _navigationManager.NavigateTo("register/athlete"))">ATHLETE</MudButton>
            </MudItem>
            <MudItem xs="6" Style="text-align: center">
                <MudButton Style="width: 100%" Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => _navigationManager.NavigateTo("register/coach"))">COACH</MudButton>
            </MudItem>

        </MudGrid>
    </MudPaper>
</MudContainer>

@if (_open)
{
    <MudDrawer Style="@_drawerCss" @bind-Open="@_open" DisableOverlay="true" Anchor="@Anchor.Right" Elevation="1" Variant="@DrawerVariant.Temporary">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6" Align="Align.Left">
                <b>ACCESS TO</b>
            </MudText>
        </MudDrawerHeader>
        <MudDrawerContainer Class="pa-5" Style="height: 100%; width: 340px;">
            <MudItem xs="12">
                <MudText Style="font-size: 16px; padding-top: 10px" Typo="Typo.subtitle2">
                    ✔️ Online Profile Access
                    <br />
                    ✔️ Access to Schools Requirements
                    <br />
                    ✔️ Upload Transcripts, SAT/ACT
                    <br />
                    ✔️ Save Favorite Schools
                    <br />
                    ✔️ Access to All Divisions
                    <br />
                    ✔️ Upload Unlimited Highlights
                    <br />
                    ✔️ Unlimited Direct Emails to Coaches
                </MudText>
            </MudItem>

            <MudItem Class="mb-6 mt-6" xs=12 Style="height: 1px; background-color: #cbcbcb !important" />

            <MudItem xs="12">
                <MudText Typo="Typo.h6" Align="Align.Left">
                    <b>PLANS</b>
                </MudText>
                <MudRadioGroup @bind-SelectedOption="PaymentMode">
                    <MudRadio Option="@("Monthly")" Color="Color.Primary">$24.99 (Monthly)</MudRadio>
                </MudRadioGroup>
            </MudItem>

            <div style="position: absolute; bottom: 1%; right: 5%">
                <MudText Align="Align.Right" Typo="Typo.h5">TOTAL <b>$@Total</b></MudText>
            </div>
        </MudDrawerContainer>
    </MudDrawer>
}

@code {

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string PromotionCode { get; set; }

    public bool ButtonDisabled { get; set; }

    private string _paymentMode = "Monthly";

    string PaymentMode
    {
        get => _paymentMode;
        set
        {
            _paymentMode = value;
            _billing.Plan = PaymentMode == "Weekly" ? "WS" : "MS";
        }
    }

    public decimal Total => PaymentMode == "Weekly" ? new decimal(7.99) : new decimal(24.99);

    bool _open;

    private string _drawerCss => _open ? "width: 340px; visibility: visible" : "width: 340px; visibility: hidden";
    private RegisterStepOne _stepOne;
    private RegisterStepTwo _stepTwo;
    private RegisterStepThree _stepThree;
    private RegisterStepFour _stepFour;

    private readonly EntityBilling _billing = new() { Plan = "MS" };
    private readonly AthleteRegisterDto _model = new() { Info = new AthleteDTO() };

    private SportDTO[] _sports;

    private int Step { get; set; }
    private bool IsLoading { get; set; }

    private async Task NextStep()
    {
        switch (Step)
        {
            case 0:
                await StepOne();
                break;
            case 1:
                StepTwo();
                break;
            case 2:
                StepThree();
                break;
        }
    }

    private async Task BackStep()
    {
        Step--;
        StateHasChanged();
    }

    private async Task StepOne()
    {
        if (await _stepOne.CheckIfCompleted())
        {
            IsLoading = true;
            StateHasChanged();

            _ = Task.Run(async () =>
            {
                var sportsResponse = await _httpClient.GetFromJsonAsync<Response<SportDTO[]>>("api/v1/sport");

                if (sportsResponse is not null)
                    _sports = sportsResponse.Payload;

                Step++;

                IsLoading = false;
                StateHasChanged();
            });
        }
        else
        {
            _snackBar.Add("Please complete the form", Severity.Warning);
        }
    }

    private void StepTwo()
    {
        if (_stepTwo.CheckIfCompleted())
        {
            _open = true;
            Step++;
            StateHasChanged();
        }
        else
        {
            _snackBar.Add("Please complete the form", Severity.Warning);
        }
    }

    private void StepThree()
    {
        _stepThree.CheckIfCompleted();

        Step++;

        StateHasChanged();
    }

}