@using iSportsRecruiting.Shared.DTO
@using iSportsRecruiting.Shared.Models
@using iSportsRecruiting.Client.Shared.Dialogs
@using System.Net.Http.Json


@inject ISnackbar _snackBar
@inject HttpClient _httpClient
@inject IDialogService _dialogService
@inject Blazored.LocalStorage.ILocalStorageService _localStorage;

@if (!PhoneMode)
{
    <MudGrid>
    <MudItem lg="2" md="2">
        <MudSelect T="int" Label="Year" @bind-Value="Year" Strict="true" Variant="Variant.Outlined" AdornmentIcon="@Icons.Filled.DateRange" AdornmentColor="Color.Primary" Required="true" Error="MissingYear">
            @for (int i = DateTime.Now.Year - 3; i <= DateTime.Now.Year; i++)
            {
                <MudSelectItem T="int" Value="i" />
            }
        </MudSelect>
    </MudItem>
    <MudItem lg="2" md="2">
        <MudSelect T="string" Label="Team" @bind-Value="Team" Strict="true" Variant="Variant.Outlined" AdornmentIcon="@Icons.Filled.DateRange" AdornmentColor="Color.Primary" Required="true" Error="MissingTeam">
            <MudSelectItem T="string" Value="@("Varsity")" />
            <MudSelectItem T="string" Value="@("Jv")" />
        </MudSelect>
    </MudItem>
    <MudItem lg="7" md="7">
        <MudTextField @bind-Value="Value" Label="@Label" Variant="Variant.Outlined" Error="MissingValue" />
    </MudItem>
    <MudItem lg="1" md="1">
        <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="Add" OnClick="Add" Style="margin-top:8px" />
    </MudItem>
    <MudItem lg="12" md="12">
        <MudTable Items="@Items" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="@Color.Secondary">
            <HeaderContent>
                <MudTh>Year</MudTh>
                <MudTh>Team</MudTh>
                <MudTh>@Label</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Year">
                    <MudChip Icon="@Icons.Material.Filled.DateRange" Color="Color.Primary" Style="color: #3FFF00">@context.Year</MudChip>
                </MudTd>
                <MudTd DataLabel="Team">@context.Team</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                @if (context.Id is not null)
                {
                    <MudTd DataLabel="Action">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="Delete" OnClick="@(() => Delete(context.Id))" Color="Color.Error" />
                    </MudTd>
                }
                else
                {
                    <MudTd DataLabel="Action">
                        <MudProgressCircular Size="Size.Small" Color="Color.Primary" />
                    </MudTd>
                }
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudGrid>
}
else
{
    <MudGrid>
    <MudItem sm="12" xs="12">
        <MudSelect T="int" Label="Year" @bind-Value="Year" Strict="true" Variant="Variant.Outlined" AdornmentIcon="@Icons.Filled.DateRange" AdornmentColor="Color.Primary" Required="true" Error="MissingYear">
            @for (int i = DateTime.Now.Year - 3; i <= DateTime.Now.Year; i++)
            {
                <MudSelectItem T="int" Value="i" />
            }
        </MudSelect>
    </MudItem>
    <MudItem sm="12" xs="12">
        <MudSelect T="string" Label="Team" @bind-Value="Team" Strict="true" Variant="Variant.Outlined" AdornmentIcon="@Icons.Filled.DateRange" AdornmentColor="Color.Primary" Required="true" Error="MissingTeam">
            <MudSelectItem T="string" Value="@("Varsity")" />
            <MudSelectItem T="string" Value="@("Jv")" />
        </MudSelect>
    </MudItem>
    <MudItem sm="12" xs="12">
        <MudTextField @bind-Value="Value" Label="@Label" Variant="Variant.Outlined" Error="MissingValue" />
    </MudItem>
    <MudItem sm="12" xs="12">
        <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="Add" OnClick="Add" Style="margin-top:8px" />
    </MudItem>
    <MudItem sm="12" xs="12">
        <MudTable Items="@Items" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="@Color.Secondary">
            <HeaderContent>
                <MudTh>Year</MudTh>
                <MudTh>Team</MudTh>
                <MudTh>@Label</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Year">
                    <MudChip Icon="@Icons.Material.Filled.DateRange" Color="Color.Primary" Style="color: #3FFF00">@context.Year</MudChip>
                </MudTd>
                <MudTd DataLabel="Team">@context.Team</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                @if (context.Id is not null)
                {
                    <MudTd DataLabel="Action">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="Delete" OnClick="@(() => Delete(context.Id))" Color="Color.Error" />
                    </MudTd>
                }
                else
                {
                    <MudTd DataLabel="Action">
                        <MudProgressCircular Size="Size.Small" Color="Color.Primary" />
                    </MudTd>
                }
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudGrid>
}



@code {
    [Parameter]
    public bool PhoneMode { get; set; }
    
    [Parameter]
    public string Label { get; set; }

    private int _year;
    public int Year
    {
        get => _year;
        set
        {
            MissingYear = false;
            _year = value;
        }
    }

    private string _value;
    public string Value
    {
        get => _value;
        set
        {
            if (!string.IsNullOrWhiteSpace(value))
                MissingValue = false;

            _value = value;
        }
    }

    private string _team;

    public string Team
    {
        get => _team;
        set
        {
            if (!string.IsNullOrWhiteSpace(value))
                MissingTeam = false;

            _team = value;
        }
    }

    public bool MissingTeam { get; set; }
    public bool MissingYear { get; set; }
    public bool MissingValue { get; set; }

    [Parameter]
    public AthleteDTO Athlete { get; set; }

    [Parameter]
    public List<(int Year, string Team, string Name, Guid Guid, int? Id)> Items { get; set; } = new();

    [Parameter]
    public EventCallback<List<(int Year, string Team, string Name, Guid Guid, int? Id)>> ItemsChanged { get; set; }

    public async Task Add()
    {
        bool shouldReturn = false;

        if (Year == 0)
        {
            MissingYear = true;
            shouldReturn = true;
        }

        if (Value is null)
        {
            MissingValue = true;
            shouldReturn = true;
        }

        if (shouldReturn) return;

        var guid = Guid.NewGuid();

        var item = (Year, Team, Value, guid, (int?)null);
        Items.Add(item);

        int yearBk = Year;
        string valueBk = Value;
        string teamBk = Team;

        Year = 0;
        Team = null;
        Value = null;
        StateHasChanged();

        await AddHonorAsync(guid, yearBk, teamBk, valueBk);
        await ItemsChanged.InvokeAsync(Items);
    }

    public async Task AddHonorAsync(Guid guid, int year, string team, string highShcool)
    {
        var httpMessage = await _httpClient.PostAsJsonAsync($"api/v1/athlete/highschool/{Athlete.UserId}",
            new AthleteHighSchoolModel { HighSchool = highShcool, Descriptions = team, Year = year });

        if (httpMessage.IsSuccessStatusCode)
        {
            var response = await httpMessage.Content.ReadFromJsonAsync<Response<int>>();

            if (!(response is not null && response.Status == ResponseStatus.Ok))
            {
                _snackBar.Add("There was a problem trying to add this honor...", Severity.Error,
                    o => o.VisibleStateDuration = 8000);
                Items = Items.Where(i => i.Guid != guid).ToList();
                return;
            }

            Items = Items.Select(i =>
            {
                if (i.Guid == guid)
                    i.Id = response.Payload;
                return i;
            }).ToList();
            StateHasChanged();

            _ = Task.Run(async () =>
            {
                var account = await _localStorage.GetItemAsync<AccountDto>("account");
                Athlete.HighSchools = Items.Select(i => new AthleteHighSchoolDto { HighSchool = i.Name, Descriptions = i.Team, Year = i.Year });
                account.Athlete = Athlete;
                await _localStorage.SetItemAsync("account", account);
            });
        }
    }

    public async Task Delete(int? id)
    {
        var reference = _dialogService.Show<DeleteConfirmation>();
        var result = await reference.Result;

        if (!result.Cancelled)
        {
            var httpMessage = await _httpClient.DeleteAsync($"api/v1/athlete/highschool/{id}");

            if (httpMessage.IsSuccessStatusCode)
            {
                var response = await httpMessage.Content.ReadFromJsonAsync<Response>();

                if (!(response is not null && response.Status == ResponseStatus.Ok))
                {
                    _snackBar.Add("There was an error trying to delete this record", Severity.Error,
                        options => options.VisibleStateDuration = 10000);
                    return;
                }

                Items = Items.Where(i => i.Id != id).ToList();
                StateHasChanged();

                Athlete.Honors = Items.Select(i => new AthleteHonorsDTO { Id = i.Id ?? 0, HonorRoll = i.Name, Year = i.Year }).ToList();

                _snackBar.Add("Deleted successfully", Severity.Success,
                    options => options.VisibleStateDuration = 10000);

                _ = Task.Run(async () =>
                {
                    var account = await _localStorage.GetItemAsync<AccountDto>("account");
                    account.Athlete = Athlete;
                    await _localStorage.SetItemAsync("account", account);
                });

                await ItemsChanged.InvokeAsync(Items);
            }
        }
    }
}
